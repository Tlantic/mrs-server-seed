#!/usr/bin/env node

/**
 * Module dependencies.
 */

var config = require('mrs-node-util').configuration;
var env = process.env.NODE_ENV ||'development';
var configData = require('./config/'+env);
var debug = require('debug')('mrs-service-node-seed:server');
var http = require('http');
var mrsLogging = require('mrs-node-logger').Logger;
var mrsBoot = require('mrs-node-util').boot;

mrsBoot.getConfigurations(configData, configData.core.host, configData.core.port, function(err, _config){
    if(err){
        console.log(err);
    }
    else {
        config.set(_config, startContext);
    }
});


function startContext(err, data){
  require('../lib/core/context').load(function(err, data){
    if(err){
      console.log(err);
    }
    else{
      startApp();
    }
  });
}

function startApp(){
     var app = require('../app');

     var port = normalizePort(config.get().port || '3000');
     app.set('port', port);

     var server = http.createServer(app);

     server.listen(port);
     server.on('error', onError);
     server.on('listening', onListening);

     mrsLogging.info('[App Started]', config.get());

     function normalizePort(val) {
       var port = parseInt(val, 10);
       if (isNaN(port)) {
         return val;
       }
       if (port >= 0) {
         return port;
       }
       return false;
     }

     function onError(error) {

       if (error.syscall !== 'listen') {
         throw error;
       }

       var bind = typeof port === 'string'
         ? 'Pipe ' + port
         : 'Port ' + port;

       // handle specific listen errors with friendly messages
       switch (error.code) {
         case 'EACCES':
           mrsLogging.errorcallback(bind + ' requires elevated privileges', function(){
               process.exit(1);
           });
           break;
         case 'EADDRINUSE':
           mrsLogging.errorcallback(bind + ' is already in use', function(){
               process.exit(1);
           });
           break;
         default:
           throw error;
       }
     }


     function onListening() {
       var addr = server.address();
       var bind = typeof addr === 'string'
         ? 'pipe ' + addr
         : 'port ' + addr.port;
       debug('Listening on ' + bind);
     }

}




process.on('uncaughtException', function (err) {
  console.log( "[Inside 'uncaughtException' event] " + err.stack || err.message );
  mrsLogging.error("[Inside 'uncaughtException' event] " + err.stack || err.message);
});
